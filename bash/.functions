#! /usr/bin/env bash

# Extract archives - use: extract <file>
# Credits to http://dotfiles.org/~pseup/.bashrc
function extract() {
	if [ -f $1 ] ; then
		case $1 in
			*.tar.bz2) tar xjf $1 ;;
			*.tar.gz) tar xzf $1 ;;
			*.bz2) bunzip2 $1 ;;
			*.rar) rar x $1 ;;
			*.gz) gunzip $1 ;;
			*.tar) tar xf $1 ;;
			*.tbz2) tar xjf $1 ;;
			*.tgz) tar xzf $1 ;;
			*.zip) unzip $1 ;;
			*.Z) uncompress $1 ;;
			*.7z) 7z x $1 ;;
			*) echo "'$1' cannot be extracted via extract()" ;;
		esac
	else
		echo "'$1' is not a valid file"
	fi
}

# easy tar. specify file to tar up
function etar() {
	if [ -d $1 ] || [ -f $1 ] ; then
		local target=${1%/};
		tar zcf $target.tgz $target
	else
		echo "Couldn't find $1."
	fi
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

function colorize() {

# Formatting constants
BOLD=`tput bold`
UNDERLINE_ON=`tput smul`
UNDERLINE_OFF=`tput rmul`
TEXT_BLACK=`tput setaf 0`
TEXT_RED=`tput setaf 1`
TEXT_GREEN=`tput setaf 2`
TEXT_YELLOW=`tput setaf 3`
TEXT_ORANGE=`tput setaf 4`
TEXT_LT_YELLOW=`tput setaf 5`
TEXT_PINK=`tput setaf 6`
TEXT_WHITE=`tput setaf 7`
TEXT_LT_BLUE=`tput setaf 153`
BACKGROUND_BLACK=`tput setab 0`
BACKGROUND_RED=`tput setab 1`
BACKGROUND_GREEN=`tput setab 2`
BACKGROUND_YELLOW=`tput setab 3`
BACKGROUND_BLUE=`tput setab 4`
BACKGROUND_MAGENTA=`tput setab 5`
BACKGROUND_CYAN=`tput setab 6`
BACKGROUND_WHITE=`tput setab 7`
RESET_FORMATTING=`tput sgr0`


gsed \
	-e "s/\(.*ERROR.*\)/${TEXT_RED}\1${RESET_FORMATTING}/gI" \
  	-e "s/\(.*FATAL.*\)/${TEXT_RED}\1${RESET_FORMATTING}/gI" \
  	-e "s/\(.*Exception\)/${BOLD}${TEXT_RED}\1${RESET_FORMATTING}/g" \
  	\
   	-e "s/\(.*WARN.*\)/${TEXT_ORANGE}\1${RESET_FORMATTING}/gI" \
   	\
  	-e "s/\(.*DEBUG.*\)/${TEXT_LT_YELLOW}\1${RESET_FORMATTING}/gI" \
  	\
  	-e "s/\(.*INFO.*\)/${TEXT_LT_BLUE}\1${RESET_FORMATTING}/gI" \
  	-e "s/\(\[INFO\]\ BUILD SUCCESSFUL\)/${BOLD}${TEXT_GREEN}\1${RESET_FORMATTING}/gI" \
   	\
  	-e "s/\(.*TRACE.*\)/\1${RESET_FORMATTING}/gI" \
  	\
  	-e "s/Tests run: \([^,]*\), Failures: \([^,]*\), Errors: \([^,]*\), Skipped: \([^,]*\)/${BOLD}${TEXT_GREEN}Tests run: \1${RESET_FORMATTING}, ${BOLD}${TEXT_RED}Failures: \2${RESET_FORMATTING}, ${BOLD}${TEXT_RED}Errors: \3${RESET_FORMATTING}, ${BOLD}${TEXT_ORANGE}Skipped: \4${RESET_FORMATTING}/g"

}

function vnc() {
  open vnc://$1
}
